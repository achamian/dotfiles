#+TITLE: Emacs Configuration
#+AUTHOR: Niranjan Paranjape

* Startup
** Performance

Change GC thrushold while starting emacs to improve initial load time. GC is set to sensible value after startup.

#+begin_src emacs-lisp
  (defvar best-gc-cons-threshold 4000000)
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook #'(lambda ()
                                 (setq gc-cons-threshold best-gc-cons-threshold)))

  (defun np/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
                         (time-subtract after-init-time before-init-time)))
               gcs-done))

  (add-hook 'emacs-startup-hook #'np/display-startup-time)
#+end_src

** Start emacs maximized

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Sensible defaults

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq delete-old-versions -1 )
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)
  (setq initial-scratch-message "")
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (setq ring-bell-function 'ignore)
#+end_src

** Disable =--dired= for =ls=

On macOS ls doesn't support =--dired= option while =linux= supports it. Disable it.

#+begin_src emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
#+end_src

** Configure environment

Load environment variables.

#+begin_src emacs-lisp
  (use-package load-env-vars
      :ensure t
      :init (load-env-vars "~/.profile"))
#+end_src

Get PATH variable from shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
      :ensure t
      :config (setq exec-path-from-shell-variables '("PATH"))
      :init
      (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

Load environment variables set using =direnv=.

#+begin_src emacs-lisp
  (use-package direnv
   :ensure t
   :config
   (direnv-mode))
#+end_src

* Configure Package

Always install package if it is not present on the system.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Frequently prompt to auto update packages.

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

Compile installed packages.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
#+end_src

* Keep Folders Clean

Keep .emacs.d and other directories clean

#+begin_src emacs-lisp
  (use-package no-littering)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* Key Bindings
** MacOS

#+begin_src emacs-lisp
  (global-set-key [(hyper a)] 'mark-whole-buffer)
  (global-set-key [(hyper v)] 'yank)
  (global-set-key [(hyper c)] 'kill-ring-save)
  (global-set-key [(hyper s)] 'save-buffer)
  (global-set-key [(hyper l)] 'goto-line)

  (global-set-key [(hyper w)]
                  (lambda () (interactive) (delete-window)))
  (global-set-key [(hyper z)] 'undo)
  ;; redo?
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'hyper)
#+end_src

** Global bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-/") 'comment-region)
  (global-set-key (kbd "H-?") 'uncomment-region)
#+end_src

* Utilities
** Fancy lambdas

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

** Which Key

=which-key= is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
      :defer 0
      :diminish which-key-mode
      :config
      (which-key-mode)
      (setq which-key-idle-delay 1))
#+end_src

** Scroll Conservatively

When point goes outside the window, Emacs usually recenters the buffer point. This changes scrolling behavior to only scroll as far as point goes.

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

** =ivy= and =counsel=

#+begin_src emacs-lisp
  (use-package counsel
    :bind
    ("M-x" . 'counsel-M-x)
    ("H-x" . 'counsel-M-x)
    ("C-s" . 'swiper)
    ([f10] . ivy-switch-buffer)

    :config
    (use-package flx)
    (use-package smex)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))
#+end_src

** Dired Mode

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (global-set-key (kbd "H-<f1>")
    (lambda ()
      (interactive)
      (dired "~/")))
#+end_src

** Always kill current buffer

#+begin_src emacs-lisp
  (defun np/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'np/kill-current-buffer)
#+end_src

** Functions

#+begin_src emacs-lisp
  (defun np/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))
#+end_src

* UI Prefences
** Window

Remove unused features which clutter the UI

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (set-window-scroll-bars (minibuffer-window) nil nil) ; Disable scrollbar in minibuffers
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
#+end_src

Column numbers and line numbers

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
    	      term-mode-hook
    	      shell-mode-hook
    	      treemacs-mode-hook
    	      eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Change the frame title to current project using =projectile=

#+begin_src emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

Use =ace-window= for window management

#+begin_src emacs-lisp
  (use-package ace-window)
  (global-set-key (kbd "M-o") 'ace-window)
#+end_src

** Better Modeline

=doom-modeline= is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

** Text
*** Font Configuration

#+begin_src emacs-lisp
  (setq np/default-fixed-font "Fira Code Retina")
  (setq np/default-fixed-font-size 140)
  (setq np/current-fixed-font-size np/default-fixed-font-size)
  (set-face-attribute 'default nil
                      :family np/default-fixed-font
                      :height np/current-fixed-font-size)
  (set-face-attribute 'fixed-pitch nil
                      :family np/default-fixed-font
                      :height np/current-fixed-font-size)

  (setq np/default-variable-font "Cantarell")
  (setq np/default-variable-font-size 140)
  (setq np/current-variable-font-size np/default-variable-font-size)
  (set-face-attribute 'variable-pitch nil
                      :family np/default-variable-font
                      :height np/current-variable-font-size)

  (setq np/font-change-increment 1.1)

  (defun np/set-font-size ()
    "Change default, fixed-pitch, and variable-pitch font sizes to match respective variables."
    (set-face-attribute 'default nil
                        :height np/current-fixed-font-size)
    (set-face-attribute 'fixed-pitch nil
                        :height np/current-fixed-font-size)
    (set-face-attribute 'variable-pitch nil
                        :height np/current-variable-font-size))

  (defun np/reset-font-size ()
    "Revert font sizes back to defaults."
    (interactive)
    (setq np/current-fixed-font-size np/default-fixed-font-size)
    (setq np/current-variable-font-size np/default-variable-font-size)
    (np/set-font-size))

  (defun np/increase-font-size ()
    "Increase current font sizes by a factor of `np/font-change-increment'."
    (interactive)
    (setq np/current-fixed-font-size
          (ceiling (* np/current-fixed-font-size np/font-change-increment)))
    (setq np/current-variable-font-size
          (ceiling (* np/current-variable-font-size np/font-change-increment)))
    (np/set-font-size))

  (defun np/decrease-font-size ()
    "Decrease current font sizes by a factor of `np/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq np/current-fixed-font-size
          (max 1
               (floor (/ np/current-fixed-font-size np/font-change-increment))))
    (setq np/current-variable-font-size
          (max 1
               (floor (/ np/current-variable-font-size np/font-change-increment))))
    (np/set-font-size))

  (define-key global-map (kbd "H-)") 'np/reset-font-size)
  (define-key global-map (kbd "H-+") 'np/increase-font-size)
  (define-key global-map (kbd "H--") 'np/decrease-font-size)

  (np/reset-font-size)
#+end_src

*** All Icons

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

** Highlight Current Line

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Highlight Uncommitted Changes

#+begin_src emacs-lisp
  (use-package diff-hl
      :config
      (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
      (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

** Colour Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-palenight t))
#+end_src

** Change Cursor

#+begin_src emacs-lisp
  (set-cursor-color "wheat")
#+end_src

** Transperency

#+begin_src emacs-lisp
  (defun np/transparency (value)
      "Sets the transparency of the frame window. 0=transparent/100=opaque."
      (interactive "nTransparency Value 0 - 100 opaque:")
      (set-frame-parameter (selected-frame) 'alpha value))

  (np/transparency 95)
#+end_src

** Dashboard

Use [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] package

#+begin_src emacs-lisp
  (setq dashboard-banner-logo-title "Huh!")
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))
  (use-package dashboard
    :config (setq dashboard-startup-banner 3)
    :init (dashboard-setup-startup-hook))
#+end_src

* Project Management
** Helm

#+begin_src emacs-lisp
  (use-package helm)
#+end_src

** Install =rg= to search

#+begin_src emacs-lisp
  (use-package rg)
  (use-package helm-rg
    :config (setq helm-rg-default-directory 'git-root)
    :bind (("H-F" . helm-projectile-rg)))
#+end_src

** Use =company= for completions

#+begin_src emacs-lisp
  (use-package company
    :config (add-hook 'prog-mode-hook 'company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    :custom
    (company-tooltip-align-annotations t)
    (company-idle-delay 0)
    (company-minimum-prefix-length 1))

  (use-package company-box
      :hook (company-mode . company-box-mode))
#+end_src

** =dumb-jump=

#+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))

  (global-set-key (kbd "M-.") 'xref-find-definitions)
#+end_src

If XREF returns more than one result show it in =ivy=

#+begin_src emacs-lisp
  (use-package ivy-xref
    :init
    (setq xref-show-definitions-function #'ivy-xref-show-defs))
#+end_src

** =flycheck=

#+begin_src emacs-lisp
  (use-package flycheck
      :defer t
      :hook (prog-mode . flycheck-mode))
#+end_src

** =magit=

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config (use-package with-editor)
    (setq magit-push-always-verify nil
          git-commit-summary-max-length 50))
#+end_src

** Neotree

#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :bind (("C-c n t" . neotree-toggle)))
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :init
    :delight '(:eval (concat " " (projectile-project-name)))
    (setq projectile-completion-system 'ivy)
    :config
    (projectile-mode)
    (setq projectile-completion-system 'ivy
          projectile-switch-project-action 'projectile-dired
          projectile-require-project-root nil)
    :bind
    (("H-p" . projectile-switch-project)
     ("H-t" . projectile-find-file)))

  (projectile-global-mode)
#+end_src

* Development
** Default configuration for development environment

Remove trailing whitespace before saving

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

New line at the end of the file

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

Automatically reload files when they change on disk

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
#+end_src

Delete selected text when overwriting

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

Indentation

#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (use-package indent-tools)
#+end_src

Treat terms in names as separate for easy navigation

#+begin_src emacs-lisp
  (use-package subword
    :config (global-subword-mode 1))
#+end_src

Enable region case modification

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

Always indent with spaces

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** LSP

Use =eglot= as LSP client

#+begin_src emacs-lisp
  (use-package eglot)
#+end_src

** Snippets

Use yasnippets and doom

#+begin_src emacs-lisp
  (use-package yasnippet
    :defer t
    :init (yas-global-mode t))

  (use-package doom-snippets
    :load-path "~/dev/etc/doom-snippets"
    :after yasnippet)
#+end_src

** CSS, Sass, and Less

#+begin_src emacs-lisp
  (use-package css-mode
    :config
    (setq css-indent-offset 2))
#+end_src

Compile CSS file on save

#+begin_src emacs-lisp
  (use-package scss-mode
    :config
    (setq scss-compile-at-save nil))
#+end_src

** Lisps
*** All Lisps

#+begin_src emacs-lisp
  (setq lispy-mode-hooks
        '(clojure-mode-hook
          emacs-lisp-mode-hook
          lisp-mode-hook))
#+end_src

Use =paredit= to play with parentheses and =rainbow-delimiters= for colouring them.

#+begin_src emacs-lisp
  (use-package paredit)
  (use-package rainbow-delimiters)
  (dolist (hook lispy-mode-hooks)
    (add-hook hook (lambda ()
                     (paredit-mode)
                     (setq show-paren-style 'expression)
                     (rainbow-delimiters-mode))))
#+end_src

*** Elisp

Use =eldoc-mode= to display documentation while working on Elisp

#+begin_src emacs-lisp
  (use-package eldoc
    :config
    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+end_src

** Ruby

I use =rbenv= to manage different ruby versions.

#+begin_src emacs-lisp
  (use-package rbenv)
#+end_src

Running tests from within Emacs is part of my flow.

#+begin_src emacs-lisp
  (use-package rspec-mode
    :config
    (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)
    (setq compilation-scroll-output nil
          rspec-command-options "--color --order random"))
#+end_src

Ruby method comments are often formatted with Yard.

#+begin_src emacs-lisp
  (use-package yard-mode
    :hook ruby-mode)
#+end_src

Auto insert =end=.

#+begin_src emacs-lisp
  (use-package ruby-end)
#+end_src

Install and enable =projectile-rails=.

#+begin_src emacs-lisp
  (use-package projectile-rails
    :config
    (projectile-rails-global-mode))
#+end_src

Things to do when =ruby-mode= is loaded

#+begin_src emacs-lisp
  (add-hook 'ruby-mode-hook
          (lambda ()
            (setq ruby-insert-encoding-magic-comment nil)
            (yas-minor-mode)
            (eglot-ensure)
            (local-set-key "\r" 'newline-and-indent)))
#+end_src

Associate various files with =ruby-mode=

#+begin_src emacs-lisp
  (np/add-auto-mode
   'ruby-mode
   "\\Gemfile$"
   "\\.rake$"
   "\\.gemspec$"
   "\\Guardfile$"
   "\\Rakefile$"
   "\\Brewfile$"
   "\\Vagrantfile$"
   "\\Vagrantfile.local$")
#+end_src

** Terraform

#+begin_src emacs-lisp
  (use-package terraform-mode)
  (use-package company-terraform)
#+end_src

** Yaml

#+begin_src emacs-lisp
  (use-package yaml-mode)

  (use-package flymake-yaml
    :init (add-hook 'yaml-mode-hook 'flymake-yaml-load))

  (np/add-auto-mode 'yaml-mode
                    "\\.yml$"
                    "\\.yml.sample$"
                    "\\.yaml.sample$")
  (load custom-file t)
#+end_src

* =org-mode=

Include =org-tempo= for easy templating using =<s=.

#+begin_src emacs-lisp
  (defun np/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :ensure org-plus-contrib
    :bind (:map org-mode-map ("C-c e" . org-edit-src-code))
    :hook (org-mode . np/org-mode-setup)
    :config
    (require 'org-tempo)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (setq org-file-apps
                       '(("md" . emacs)
                         ("org" . emacs))))))

  (add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+end_src

** Display Preferences

*** Bullets

Use =org-bullets= to use pretty bullets instead of asterisks

#+begin_src emacs-lisp
  (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Misc display preferences

#+begin_src emacs-lisp
  (setq org-ellipsis " ▾"                     ;; better ellipsis
        org-src-fontify-natively t		;; syntax highlighting for code blocks
        org-src-tab-acts-natively t		;; tab behavior in code blocks
        org-src-window-setup 'current-window)	;; don't open new window while editing code
#+end_src

*** Better fonts

#+begin_src emacs-lisp

  (defun np/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

  (np/org-font-setup)

#+end_src

*** Center Org Buffers

Use =visual-fill-column= to center =org-mode= beffers

#+begin_src emacs-lisp
  (defun np/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . np/org-mode-visual-fill))
#+end_src
*
** Task Management

*** Configure Agenda Files

Store all org files under =~/dev/exocortex=. Archived tasks go in =archive.org=

#+begin_src emacs-lisp
  (setq org-directory "~/dev/exocortex")

  (defun org-file-path (filename)
    "FILENAME: Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-inbox-file (org-file-path "inbox.org"))
  (setq org-index-file (org-file-path "index.org"))

  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+end_src

Agenda is spread across multiple files.

#+begin_src emacs-lisp
  (setq org-agenda-files (list org-index-file
                               (org-file-path "events.org")
                               (org-file-path "habits.org")
                               (org-file-path "recurring-events.org")
                               (org-file-path "work.org")))
#+end_src

*** Mark Tasks Done

Mark TODO done and archive it

#+begin_src emacs-lisp
  (defun np/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'np/mark-done-and-archive)
#+end_src

Record time when TODO was archived

#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

Ensure that a task can’t be marked as done if it contains unfinished subtasks or checklist items. This is handy for organizing “blocking” tasks hierarchically.

#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
#+end_src

*** Agenda Display
Begin week today

#+begin_src emacs-lisp
  (setq org-agenda-start-on-weekday nil)
#+end_src

Show next 14 days plan

#+begin_src emacs-lisp
  (setq org-agenda-span 14)
#+end_src

Don't show deadline entries under today's entry

#+begin_src emacs-lisp
  (setq org-deadline-warning-days 0)
#+end_src

*** Capture Templates

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo"
           entry
           (file+headline org-index-file "Inbox")
           "* TODO %?\n")
          ("w" "Todo"
           entry
           (file+headline "~/dev/exocortex/work.org" "Tasks")
           "* TODO %?\n")
          ("u" "Standup Update"
           entry
           (file+datetree "~/dev/exocortex/work.org")
           "* %?\n")))
#+end_src

** Key Bindings

#+begin_src emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+end_src

* Writing prose

** TODO Flush this out

* Evaluate Packages
** [[https://github.com/abo-abo/avy][avy]]
** ivy-rich
** hi-lock
** [[https://github.com/noctuid/general.el][general.el]]
** Is helm required?
** Doom and spacemacs ruby mode
** deft
** wgrep
** refile TODO to agenda files
