#+TITLE: Emacs Configuration
#+AUTHOR: Niranjan Paranjape

* Startup
** Performance

Change GC thrushold while starting emacs to improve initial load time. GC is set to sensible value after startup.

#+begin_src emacs-lisp
  (defvar best-gc-cons-threshold 4000000)
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook #'(lambda ()
                                 (setq gc-cons-threshold best-gc-cons-threshold)))

  (defun np/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
                         (time-subtract after-init-time before-init-time)))
               gcs-done))

  (add-hook 'emacs-startup-hook #'np/display-startup-time)
#+end_src

** Start emacs maximized

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Sensible defaults

#+begin_src emacs-lisp
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)
  (setq initial-scratch-message "")
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (setq ring-bell-function 'ignore)
#+end_src

** Disable =--dired= for =ls=

On macOS ls doesn't support =--dired= option while =linux= supports it. Disable it.

#+begin_src emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
#+end_src

** Configure environment

Load environment variables.

#+begin_src emacs-lisp
  (use-package load-env-vars
      :ensure t
      :init (load-env-vars "~/.profile"))
#+end_src

Get PATH variable from shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
      :ensure t
      :config (setq exec-path-from-shell-variables '("PATH"))
      :init
      (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

Load environment variables set using =direnv=.

#+begin_src emacs-lisp
  (use-package direnv
   :ensure t
   :config
   (direnv-mode))
#+end_src

* Configure Package

Always install package if it is not present on the system.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Frequently prompt to auto update packages.

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

Compile installed packages.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
#+end_src

* Keep Folders Clean

Keep .emacs.d and other directories clean

#+begin_src emacs-lisp
  (use-package no-littering)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* Utilities
** Functions
** Fancy lambdas

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

* Key Bindings
** MacOS

#+begin_src emacs-lisp
  (global-set-key [(hyper a)] 'mark-whole-buffer)
  (global-set-key [(hyper v)] 'yank)
  (global-set-key [(hyper c)] 'kill-ring-save)
  (global-set-key [(hyper s)] 'save-buffer)
  (global-set-key [(hyper l)] 'goto-line)

  (global-set-key [(hyper w)]
                  (lambda () (interactive) (delete-window)))
  (global-set-key [(hyper z)] 'undo)
  ;; redo?
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'hyper)
#+end_src

** Global bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-/") 'comment-region)
  (global-set-key (kbd "H-?") 'uncomment-region)
#+end_src

* UI Prefences
** Window

Remove unused features which clutter the UI

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (set-window-scroll-bars (minibuffer-window) nil nil) ; Disable scrollbar in minibuffers
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
#+end_src

Column numbers and line numbers

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
    	      term-mode-hook
    	      shell-mode-hook
    	      treemacs-mode-hook
    	      eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Change the frame title to current project using =projectile=

#+begin_src emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

Use =ace-window= for window management

#+begin_src emacs-lisp
  (use-package ace-window)
  (global-set-key (kbd "M-o") 'ace-window)
#+end_src

** Better Modeline

=doom-modeline= is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

** Text
*** Font Configuration

#+begin_src emacs-lisp
  (setq np/default-fixed-font "Fira Code Retina")
  (setq np/default-fixed-font-size 140)
  (setq np/current-fixed-font-size np/default-fixed-font-size)
  (set-face-attribute 'default nil
                      :family np/default-fixed-font
                      :height np/current-fixed-font-size)
  (set-face-attribute 'fixed-pitch nil
                      :family np/default-fixed-font
                      :height np/current-fixed-font-size)

  (setq np/default-variable-font "Cantarell")
  (setq np/default-variable-font-size 140)
  (setq np/current-variable-font-size np/default-variable-font-size)
  (set-face-attribute 'variable-pitch nil
                      :family np/default-variable-font
                      :height np/current-variable-font-size)

  (setq np/font-change-increment 1.1)

  (defun np/set-font-size ()
    "Change default, fixed-pitch, and variable-pitch font sizes to match respective variables."
    (set-face-attribute 'default nil
                        :height np/current-fixed-font-size)
    (set-face-attribute 'fixed-pitch nil
                        :height np/current-fixed-font-size)
    (set-face-attribute 'variable-pitch nil
                        :height np/current-variable-font-size))

  (defun np/reset-font-size ()
    "Revert font sizes back to defaults."
    (interactive)
    (setq np/current-fixed-font-size np/default-fixed-font-size)
    (setq np/current-variable-font-size np/default-variable-font-size)
    (np/set-font-size))

  (defun np/increase-font-size ()
    "Increase current font sizes by a factor of `np/font-change-increment'."
    (interactive)
    (setq np/current-fixed-font-size
          (ceiling (* np/current-fixed-font-size np/font-change-increment)))
    (setq np/current-variable-font-size
          (ceiling (* np/current-variable-font-size np/font-change-increment)))
    (np/set-font-size))

  (defun np/decrease-font-size ()
    "Decrease current font sizes by a factor of `np/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq np/current-fixed-font-size
          (max 1
               (floor (/ np/current-fixed-font-size np/font-change-increment))))
    (setq np/current-variable-font-size
          (max 1
               (floor (/ np/current-variable-font-size np/font-change-increment))))
    (np/set-font-size))

  (define-key global-map (kbd "H-)") 'np/reset-font-size)
  (define-key global-map (kbd "H-+") 'np/increase-font-size)
  (define-key global-map (kbd "H--") 'np/decrease-font-size)

  (np/reset-font-size)
#+end_src

*** All Icons

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

*** Highlight Current Line

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

*** Highlight Uncommitted Changes

#+begin_src emacs-lisp
  (use-package diff-hl
      :config
      (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
      (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

*** Change Cursor

#+begin_src emacs-lisp
  (set-cursor-color "wheat")
#+end_src

** Colour Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-palenight t))
#+end_src

** Transperency

#+begin_src emacs-lisp
  (defun np/transparency (value)
      "Sets the transparency of the frame window. 0=transparent/100=opaque."
      (interactive "nTransparency Value 0 - 100 opaque:")
      (set-frame-parameter (selected-frame) 'alpha value))

  (np/transparency 95)
#+end_src

* =org-mode=

Include =org-tempo= for easy templating using =<s=.

#+begin_src emacs-lisp
  (defun np/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :ensure org-plus-contrib
    :bind (:map org-mode-map ("C-c e" . org-edit-src-code))
    :hook (org-mode . np/org-mode-setup)
    :config
    (require 'org-tempo)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (setq org-file-apps
                       '(("md" . emacs)
                         ("org" . emacs))))))

  (add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+end_src

** Display Preferences

Use =org-bullets= to use pretty bullets instead of asterisks

#+begin_src emacs-lisp
  (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

Misc display preferences

#+begin_src emacs-lisp
  (setq org-ellipsis " ▾"                     ;; better ellipsis
        org-src-fontify-natively t		;; syntax highlighting for code blocks
        org-src-tab-acts-natively t		;; tab behavior in code blocks
        org-src-window-setup 'current-window)	;; don't open new window while editing code
#+end_src
